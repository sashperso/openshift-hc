---

# get Management State
- name: Get management state of image registry operator
  ansible.builtin.shell: oc describe configs.imageregistry.operator.openshift.io -n openshift-image-registry | grep -m 1 Management | awk '{print $3}'
  register: management_state_registry

- name: Set variable for management state
  set_fact:
    management_state_registry: "{{ management_state_registry.stdout }}"

# color for Management State
- name: Colouring Management State
  ansible.builtin.set_fact:
    state: 'image::./images/good.png[image,50,50]'
  when: management_state_registry == 'Managed'

# color for Management State
- name: Colouring Management State
  ansible.builtin.set_fact:
    state: 'image::./images/warning.png[image,50,50]'
  when: management_state_registry == 'Removed'

# color for Management State
- name: Colouring Management State
  ansible.builtin.set_fact:
    state: 'image::./images/bad.png[image,50,50]'
  when: management_state_registry == 'Unmanaged'


# get external images from worker and infrastructure nodes
- name: Get external images from worker and infrastructure nodes
  ansible.builtin.shell: sh roles/imageregistry/tasks/for_node_loop_series.sh | sort -u > ./roles/imageregistry/tasks/tmp.txt
  
# editing tmp file to just get image names
- name: Editing tmp text file in current directory to remove all other text except Repository images on node
  ansible.builtin.shell: sed '/^sh/d' ./roles/imageregistry/tasks/tmp.txt | sed '$d'
  register: external_images_node

# finding external images that are not provided/supported by redhat and openshift in openshift-image-registry namespace
- name: Get external build image names in openshift-image-registry namespace
  ansible.builtin.shell: oc get images -n openshift-image-registry | grep -v redhat | grep -v openshift-release-dev | awk '{print $2}' | sed '1d'
  register: external_images_registry_namespace

- name: Set variable
  set_fact:
    external_images_node: "{{ external_images_node.stdout }}"
    external_images_registry_namespace: "{{ external_images_registry_namespace.stdout }}"

 # color for external images
- name: Colouring Management State
  ansible.builtin.set_fact:
    state2: 'image::./images/good.png[image,50,50]'
  when: external_images_node  == ''

# color for Management State
- name: Colouring Management State
  ansible.builtin.set_fact:
    state2: 'image::./images/warning.png[image,50,50]'
  when: external_images_node != ''

- name: set fact
  set_fact:
    external_images_node: "No external images found on nodes"
  when: external_images_node  == ''


 # color for external images
- name: Colouring Management State
  ansible.builtin.set_fact:
    state3: 'image::./images/good.png[image,50,50]'
  when: external_images_registry_namespace  == ''

# color for Management State
- name: Colouring Management State
  ansible.builtin.set_fact:
    state3: 'image::./images/warning.png[image,50,50]'
  when: external_images_registry_namespace != ''

- name: set fact
  set_fact:
    external_images_registry_namespace: "No external images found on namespaces"
  when: external_images_registry_namespace  == ''



