---
- name: Calculate the limits and set fact
  ansible.builtin.set_fact:
    override_resource_statistics: "{{ override_resource_statistics | default([]) | combine({my_index: stat_report })}}"
  vars:  
    calc: "{% if refactored_value > request_limits %}{{ requested_resources | int - request_limits | int }}{% else %}fine{% endif %}"
    requested_resources: "{{ item.split().2[1:-2] | int }}"
    refactored_value: "{% if (requested_resources | int) > 80 %}{{ requested_resources }}{% else %}0{% endif %}"
    request_limits: "{{ item.split().4[1:-2] | int }}"
    stat_report:
      resource: "{{ item.split().0 }}"
      overlimit: "{{ calc }}"
      current_request: "{{ requested_resources }}"      
  loop: "{{ outer_item.node_lines | map('trim') | list }}"
  loop_control: 
    index_var: my_index    

- name: Set above task into a readable dictionary for a single node
  ansible.builtin.set_fact:
    override_node_stats: "{ '{{ outer_item.name_node }}': {{ override_resource_statistics }} }"

- name: Set dictionary for all the nodes in one fact
  ansible.builtin.set_fact:
    override_set_statistics: "{{ override_set_statistics | default([]) | combine(override_node_stats, recursive=true) }}"


